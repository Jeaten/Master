# !/usr/bin/env python
# -*- coding: utf-8 -*-

'''
#该文件画带宽为1-5，曼哈顿距离为0的收益图
import matplotlib.pyplot as plt
# font = matplotlib.font_manager.FontProperties( fname=r"C:\Windows\Fonts\Deng.ttf" )
BayesM_0Band=[[ [17926.00000000001, 14179.333333333463, 13178.000000000027, 9761.000000000071, 8877.666666666755, 6766.666666666732, 6158.0000000000455, 4944.33333333332, 4543.333333333312, 3811.9999999999613, 3704.9999999999686, 3270.9999999999795, 3100.9999999999854, 2650.3333333333285, 2588.3333333333303] ,
[72949, 46624, 41776, 27738, 25287, 17409, 15758, 11469, 10512, 8143, 7882, 6666, 6297, 5199, 5041] ,
[0.24573332053900684, 0.3041209105467884, 0.3154442742244357, 0.3518999206864255, 0.35107631062074407, 0.3886878434526241, 0.3907856326945073, 0.4311041357863214, 0.43220446473870927, 0.46813213803266135, 0.4700583608221224, 0.49069906990698764, 0.4924567254248032, 0.5097775213182013, 0.5134563248032792] ],

[ [23863.000000000036, 17564.666666666326, 15967.333333332917, 11397.999999999876, 10353.333333333338, 7689.3333333334585, 6935.6666666667625, 5437.000000000014, 4980.999999999996, 4088.333333333288, 3956.333333333293, 3520.3333333333044, 3339.6666666666456, 2831.999999999994, 2763.9999999999923] ,
[81253, 50844, 45188, 29660, 26993, 18419, 16599, 11990, 10976, 8429, 8142, 6920, 6541, 5383, 5220] ,
[0.29368761768796275, 0.34546193585607593, 0.35335339765718593, 0.3842886041807106, 0.3835562306276938, 0.41746747018477975, 0.4178364158483501, 0.4534612176814023, 0.45380830903790054, 0.4850318345394813, 0.48591664619667074, 0.5087186897880498, 0.5105743260459632, 0.5261006873490608, 0.5295019157088108] ],

[ [25615.3333333337, 18697.33333333303, 16974.666666666282, 12099.999999999816, 10930.666666666631, 7978.666666666804, 7202.333333333436, 5596.000000000025, 5115.666666666672, 4176.666666666628, 4044.6666666666256, 3601.3333333333035, 3420.6666666666456, 2868.999999999994, 2798.999999999993] ,
[83262, 52097, 46288, 30396, 27593, 18715, 16871, 12151, 11113, 8518, 8231, 7001, 6622, 5420, 5255] ,
[0.3076473461282902, 0.3588946260501186, 0.3667185159580514, 0.3980786945650683, 0.3961391174090034, 0.4263246949862038, 0.4269061308359573, 0.46053822730639654, 0.4603317436035879, 0.49033419425529795, 0.4913943222775636, 0.5144027043755611, 0.5165609584214204, 0.5293357933579325, 0.532635585156992] ],

[ [26458.666666667144, 19324.666666666475, 17516.33333333296, 12456.999999999794, 11220.99999999994, 8103.333333333472, 7311.333333333439, 5677.00000000003, 5187.666666666678, 4208.666666666632, 4066.6666666666256, 3622.333333333303, 3434.666666666646, 2873.999999999994, 2808.999999999993] ,
[84154, 52739, 46839, 30756, 27886, 18840, 16980, 12232, 11185, 8550, 8253, 7022, 6636, 5425, 5265] ,
[0.31440771284391883, 0.36642080181016845, 0.3739689859589863, 0.405026661464423, 0.4023882952018913, 0.430113234253369, 0.43058500196310007, 0.4641105297580142, 0.463805692147222, 0.49224171539960615, 0.49275011107071676, 0.5158549321181007, 0.5175808720112487, 0.5297695852534551, 0.5335232668565989] ],

[ [26949.333333333878, 19715.66666666653, 17900.999999999705, 12651.666666666457, 11380.99999999994, 8175.333333333474, 7366.3333333334385, 5716.000000000031, 5215.666666666677, 4215.6666666666315, 4077.6666666666256, 3630.333333333303, 3437.666666666646, 2875.9999999999945, 2809.999999999993] ,
[84650, 53131, 47225, 30951, 28046, 18912, 17035, 12271, 11213, 8557, 8264, 7030, 6639, 5427, 5266] ,
[0.3183618822602939, 0.37107652155364157, 0.3790577024880827, 0.4087643910266698, 0.4057976181986715, 0.4322828539199172, 0.4324234419332808, 0.4658137071143371, 0.46514462379975713, 0.49265708386895307, 0.49342529848337674, 0.51640587956377, 0.5177988652909543, 0.5299428782015837, 0.533611849601214] ]
]
LstmM_0Band=[[ [20535.666666666635, 11584.333333333234, 9056.333333333409, 6678.666666666715, 6382.333333333401, 4283.999999999991, 4269.999999999986, 2688.999999999996, 2664.333333333333, 1121.3333333333328, 1029.6666666666654, 784.9999999999989, 883.3333333333329, 523.6666666666671, 485.66666666666697] ,
[69432, 28056, 21418, 14879, 14429, 9597, 9380, 5671, 5460, 2488, 2220, 1729, 2046, 1133, 1074] ,
[0.29576660137496597, 0.4129003896967933, 0.42283748871665927, 0.448865291126199, 0.44232679557373356, 0.4463894967177233, 0.45522388059701346, 0.47416681361311863, 0.4879731379731379, 0.4506966773847801, 0.46381381381381326, 0.4540196645459797, 0.4317367220593025, 0.46219476316563735, 0.45220360024829326] ],

[ [24524.666666666853, 12427.66666666653, 9603.333333333394, 6961.333333333388, 6589.333333333408, 4351.999999999985, 4375.999999999987, 2720.9999999999945, 2684.3333333333326, 1126.3333333333328, 1037.6666666666656, 786.9999999999989, 885.3333333333329, 523.6666666666671, 485.66666666666697] ,
[73905, 28915, 21974, 15162, 14638, 9665, 9486, 5703, 5480, 2493, 2228, 1731, 2048, 1133, 1074] ,
[0.3318404257718267, 0.4297999884719533, 0.4370316434574221, 0.45913028184496685, 0.45015257093410355, 0.45028453181582884, 0.4613114062829419, 0.4771173066806934, 0.48984184914841833, 0.4517983687658776, 0.46573907839616946, 0.4546504910456377, 0.43229166666666646, 0.46219476316563735, 0.45220360024829326] ],

[ [25330.66666666689, 12546.333333333185, 9674.333333333385, 6999.333333333386, 6603.333333333408, 4359.999999999986, 4382.999999999987, 2724.9999999999945, 2685.3333333333326, 1127.333333333333, 1037.6666666666656, 786.9999999999989, 885.3333333333329, 523.6666666666671, 485.66666666666697] ,
[74717, 29034, 22045, 15200, 14652, 9673, 9493, 5707, 5481, 2494, 2228, 1731, 2048, 1133, 1074] ,
[0.3390214632100712, 0.4321255539482395, 0.43884478717774483, 0.4604824561403543, 0.45067795067795574, 0.45073917088803744, 0.46170862740966895, 0.47748379183458817, 0.48993492671653577, 0.4520181769580325, 0.46573907839616946, 0.4546504910456377, 0.43229166666666646, 0.46219476316563735, 0.45220360024829326] ],

[ [25537.666666666864, 12564.333333333185, 9685.333333333385, 7004.333333333386, 6605.333333333408, 4359.999999999986, 4382.999999999987, 2724.9999999999945, 2685.3333333333326, 1127.333333333333, 1037.6666666666656, 786.9999999999989, 885.3333333333329, 523.6666666666671, 485.66666666666697] ,
[74924, 29052, 22056, 15205, 14654, 9673, 9493, 5707, 5481, 2494, 2228, 1731, 2048, 1133, 1074] ,
[0.34084761447155604, 0.4324773968516173, 0.43912465239995396, 0.4606598706565857, 0.45075292297894143, 0.45073917088803744, 0.46170862740966895, 0.47748379183458817, 0.48993492671653577, 0.4520181769580325, 0.46573907839616946, 0.4546504910456377, 0.43229166666666646, 0.46219476316563735, 0.45220360024829326] ],

[ [25582.666666666868, 12570.333333333185, 9687.333333333383, 7005.333333333386, 6605.333333333408, 4359.999999999986, 4382.999999999987, 2724.9999999999945, 2685.3333333333326, 1127.333333333333, 1037.6666666666656, 786.9999999999989, 885.3333333333329, 523.6666666666671, 485.66666666666697] ,
[74969, 29058, 22058, 15206, 14654, 9673, 9493, 5707, 5481, 2494, 2228, 1731, 2048, 1133, 1074] ,
[0.34124326944026023, 0.4325945809530313, 0.43917550699670793, 0.4606953395589495, 0.45075292297894143, 0.45073917088803744, 0.46170862740966895, 0.47748379183458817, 0.48993492671653577, 0.4520181769580325, 0.46573907839616946, 0.4546504910456377, 0.43229166666666646, 0.46219476316563735, 0.45220360024829326] ]
]
def DrawNumMess(Kind,SavePath):
    Step = [b for b in range( 1, 16 )]
    Bandwidth = [(b + 1) for b in range( 5 )]
    Bayes = [BayesM_0Band[b - 1][Kind] for b in Bandwidth]
    Lstm = [LstmM_0Band[b - 1][Kind] for b in Bandwidth]
    Color = ['lawngreen', 'k', 'magenta', 'cyan', 'r']
    Bandwidth = ['Bandwidth=', 'Bandwidth=', 'Bandwidth=', 'Bandwidth=', 'Bandwidth=']
    fig = plt.figure()
    ax1 = fig.add_subplot( 211 )
    ax1.text( 5, 60000, 'Prediction based on Bayes' )
    # ax1.text( 6, 0.28, 'Predict by Bayes' )
    ax2 = fig.add_subplot( 212 )
    ax2.text( 5, 50000, 'Prediction based on Lstm' )
    # ax2.text( 6, 0.32, 'Predict by Lstm' )
    # ax1.set_xlabel( 'Length of trajectory' )
    ax1.set_ylabel( 'Number of messages' )
    # ax1.set_ylabel( 'Accuracy' )
    ax2.set_ylabel( 'Number of messages' )
    # ax2.set_ylabel( 'Accuracy' )
    # ax1.set_title( 'At least 1 node predicts correctly' )
    ax2.set_xlabel( 'The location where the messages are sent' )
    for i in range( len( Bayes ) ):
        ax1.plot( Step, Bayes[i], color=Color[i], label=Bandwidth[i] + str( i + 1 ) )
    for i in range( len( Lstm ) ):
        ax2.plot( Step, Lstm[i], color=Color[i], label=Bandwidth[i] + str( i + 1 ) )
    ax1.legend()
    ax2.legend()
    plt.savefig( SavePath, dpi=200, format='eps' )
    plt.show()
def DrawAcc(Kind,SavePath):
    Step = [b for b in range( 1, 16 )]
    Bandwidth = [(b + 1) for b in range( 5 )]
    Bayes = [BayesM_0Band[b - 1][Kind] for b in Bandwidth]
    Lstm = [LstmM_0Band[b - 1][Kind] for b in Bandwidth]
    Color = ['lawngreen', 'k', 'magenta', 'cyan', 'r']
    Bandwidth = ['Bandwidth=', 'Bandwidth=', 'Bandwidth=', 'Bandwidth=', 'Bandwidth=']
    fig = plt.figure()
    ax1 = fig.add_subplot( 211 )
    # ax1.text( 6, 60000, 'Predict by Bayes' )
    ax1.text( 4, 0.28, 'Prediction based on Bayes' )
    ax2 = fig.add_subplot( 212 )
    # ax2.text( 6, 50000, 'Predict by Lstm' )
    ax2.text( 4, 0.36, 'Prediction based on Lstm' )
    # ax1.set_xlabel( 'Length of trajectory' )
    # ax1.set_ylabel( 'Number of messages' )
    ax1.set_ylabel( 'Accuracy' )
    # ax2.set_ylabel( 'Number of messages' )
    ax2.set_ylabel( 'Accuracy' )
    # ax1.set_title( 'At least 1 node predicts correctly' )
    ax2.set_xlabel( 'The location where the messages are sent' )
    for i in range( len( Bayes ) ):
        ax1.plot( Step, Bayes[i], color=Color[i], label=Bandwidth[i] + str( i + 1 ) )
    for i in range( len( Lstm ) ):
        ax2.plot( Step, Lstm[i], color=Color[i], label=Bandwidth[i] + str( i + 1 ) )
    ax1.legend()
    ax2.legend()
    plt.savefig( SavePath, dpi=200, format='eps' )
    plt.show()
if __name__ == '__main__':
    SavePath=['./NumMessage.eps','./AccM.eps']
    DrawNumMess(1, SavePath[0] )#画发送消息数目的图像
    DrawAcc( 2, SavePath[1] )#画消息的平均准确率的图像
'''
import matplotlib.pyplot as plt
BayesAccuracy=[0.3241295662100457, 0.3596960616438356, 0.3991866438356164,0.4520191210045662, 0.502960901826484,
                 0.5687785388127854, 0.6419092465753424, 0.7066566780821918,0.7594534817351598, 0.8069349315068494,
                 0.8441780821917808, 0.8772117579908676, 0.8994720319634704,0.918236301369863, 0.9320776255707762]

LstmAccuracy=[ 0.1365582191780822,0.3883418949771689,0.4334688926940639,0.62931649543379,0.6791880707762558,
               0.7458618721461188,0.791095890410959,0.8502425799086758,0.868400399543379,0.8629780251141552,
               0.8970462328767124,0.8995790525114156,0.8944420662100456,0.9204837328767124,0.8584474885844748]
Abscissa=[]
Bayes=[]
Lstm=[]
for i in (BayesAccuracy[1:-1]):
    Bayes.append(i)
    Abscissa.append(len(Bayes))
for i in (LstmAccuracy[1:-1]):
    Lstm.append(i)
plt.plot(Abscissa,Bayes,color='r')
# plt.plot(Abscissa,Lstm,'r')
plt.xlabel('Feature')
plt.ylabel('Accuracy')
# plt.legend(['Bayes','Lstm'])
plt.show()
